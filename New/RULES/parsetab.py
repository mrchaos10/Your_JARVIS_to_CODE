
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CHAR CHARACTER EQUALS NUMBER SIGNEDCHAR UNSIGNEDCHAR VARstatement : CHARstatement : SIGNEDCHARstatement : UNSIGNEDCHARstatement : CHAR VARstatement : SIGNEDCHAR VARstatement : UNSIGNEDCHAR VARstatement : CHAR VAR EQUALS NUMBERstatement : CHAR VAR EQUALS CHARACTERstatement : CHAR VAR EQUALS VARstatement : SIGNEDCHAR VAR EQUALS NUMBERstatement : SIGNEDCHAR VAR EQUALS CHARACTERstatement : SIGNEDCHAR VAR EQUALS VARstatement : UNSIGNEDCHAR VAR EQUALS NUMBERstatement : UNSIGNEDCHAR VAR EQUALS CHARACTERstatement : UNSIGNEDCHAR VAR EQUALS VAR'
    
_lr_action_items = {'SIGNEDCHAR':([0,],[1,]),'CHARACTER':([8,9,10,],[12,15,18,]),'EQUALS':([5,6,7,],[8,9,10,]),'NUMBER':([8,9,10,],[13,16,19,]),'CHAR':([0,],[2,]),'UNSIGNEDCHAR':([0,],[3,]),'VAR':([1,2,3,8,9,10,],[5,6,7,11,14,17,]),'$end':([1,2,3,4,5,6,7,11,12,13,14,15,16,17,18,19,],[-2,-1,-3,0,-5,-4,-6,-12,-11,-10,-9,-8,-7,-15,-14,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> CHAR','statement',1,'p_statement_rule1','char.py',62),
  ('statement -> SIGNEDCHAR','statement',1,'p_statement_rule2','char.py',65),
  ('statement -> UNSIGNEDCHAR','statement',1,'p_statement_rule3','char.py',68),
  ('statement -> CHAR VAR','statement',2,'p_statement_rule4','char.py',72),
  ('statement -> SIGNEDCHAR VAR','statement',2,'p_statement_rule5','char.py',75),
  ('statement -> UNSIGNEDCHAR VAR','statement',2,'p_statement_rule6','char.py',78),
  ('statement -> CHAR VAR EQUALS NUMBER','statement',4,'p_statement_rule7','char.py',82),
  ('statement -> CHAR VAR EQUALS CHARACTER','statement',4,'p_statement_rule8','char.py',85),
  ('statement -> CHAR VAR EQUALS VAR','statement',4,'p_statement_rule9','char.py',88),
  ('statement -> SIGNEDCHAR VAR EQUALS NUMBER','statement',4,'p_statement_rule10','char.py',92),
  ('statement -> SIGNEDCHAR VAR EQUALS CHARACTER','statement',4,'p_statement_rule11','char.py',96),
  ('statement -> SIGNEDCHAR VAR EQUALS VAR','statement',4,'p_statement_rule12','char.py',99),
  ('statement -> UNSIGNEDCHAR VAR EQUALS NUMBER','statement',4,'p_statement_rule13','char.py',103),
  ('statement -> UNSIGNEDCHAR VAR EQUALS CHARACTER','statement',4,'p_statement_rule14','char.py',107),
  ('statement -> UNSIGNEDCHAR VAR EQUALS VAR','statement',4,'p_statement_rule15','char.py',110),
]
